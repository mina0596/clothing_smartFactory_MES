<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ksmart39.springboot.dao.SystemMapper">

<!-- =========================================================== -->
<resultMap type="HumanResources"  id="getHumanResourcesInfo">
	<result  property="employeeCode" 				column="employee_code"/>
	<result  property="levelNum" 				column="level_num"/>
	<result  property="employeeId" 				column="employee_id"/>
	<result  property="employeePw" 			column="employee_pw"/>
	<result  property="employeeName" 			column="employee_name"/>
	<result  property="employeeTel" 				column="employee_tel"/>
	<result  property="employeeAddress" 				column="employee_address"/>
	<result  property="employeeEmail" 				column="employee_email"/>
	<result  property="employeeDepartment" 				column="employee_department"/>
	<result  property="employeePosition" 		column="employee_position"/>
	<result  property="employeeInfoRegDate" 		column="employee_info_reg_date"/>
	<result  property="employeeInfoUpdateDate" 		column="employee_info_update_date"/>
	<association property="humanResourcesLevel"  javaType="HumanResourcesLevel">
		<id property="levelNum"  column="level_num"/>	 <!-- join 공통 -->
		<result property="levelName" column="level_name"/>
	</association>
</resultMap>
	
	
	<select id="getHumanResources" resultMap="getHumanResourcesInfo" parameterType = "map"  resultType="HumanResources" fetchSize="1000">
		SELECT
			e.employee_code
			,e.level_num
			,e.employee_id
			,e.employee_pw
			,e.employee_name
			,e.employee_tel
			,e.employee_address
			,e.employee_email
			,e.employee_department
			,e.employee_position
			,e.employee_info_reg_date
			,e.employee_info_update_date
			,l.level_name
		FROM
			employee_info as e
			INNER JOIN
			erp_access_level as l
			on
			e.level_num = l.level_num;
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%', #{searchValue} ,'%');
			</if>
		</trim>
	</select>
	
	<select id="getHumanResourcesCount" resultType="int">
		SELECT 
			COUNT(1)
		FROM
			employee_info as e
			INNER JOIN
			erp_access_level as l
			on
			e.level_num = l.level_num;	
	</select>
	
	<insert id="addHumanResources" parameterType="HumanResources">
		INSERT INTO employee_info
		( employee_code
		 ,level_num
		 ,employee_id
		 ,employee_pw
		 ,employee_name
		 ,employee_tel
		 ,employee_address
		 ,employee_email
		 ,employee_department
		 ,employee_position
		 ,employee_info_reg_date
		 ,employee_info_update_date
		)VALUES(
  			sf_newEmployeeCode()
		 ,#{levelNum}
		 ,#{employeeId}
		 ,#{employeePw}
		 ,#{employeeName}
		 ,#{employeeTel}
		 ,#{employeeAddress}
		 ,#{employeeEmail}
		 ,#{employeeDepartment}
		 ,#{employeePosition}
		 ,CURDATE()
		 ,CURDATE());
	</insert>

	<select id="getEmployeeInfoByCode" parameterType="String" resultMap="getHumanResourcesInfo">
		SELECT 
			 employee_code
			,employee_id			
			,employee_pw			
			,employee_name			
			,employee_tel		
			,employee_address		
			,employee_email			
			,employee_department		
			,employee_position		
		FROM 
			employee_info
		WHERE 
			employee_code = #{employeeCode};
	</select>
	
	<select id="getEmployeeInfoById" parameterType="String" resultMap="getHumanResourcesInfo">
		SELECT 
			 employee_code
			,employee_id			
			,employee_pw			
			,employee_name			
			,employee_tel		
			,employee_address		
			,employee_email			
			,employee_department		
			,employee_position	
			,level_num	
		FROM 
			employee_info
		WHERE 
			employee_id = #{employeeId};
	</select>
	
	<update id="modifyHumanResources" parameterType="HumanResources">
		UPDATE employee_info 
		<trim prefix="SET" prefixOverrides=",">
			<if test="levelNum != null and levelNum != ''.toString()">			
				,level_num = #{levelNum}
			</if>
			<if test="employeeId != null and employeeId != ''.toString()">			
				,employee_id = #{employeeId}
			</if>
			<if test="employeePw != null and employeePw != ''.toString()">			
				,employee_pw = #{employeePw}
			</if>
			<if test="employeeName != null and employeeName != ''.toString()">			
				,employee_name = #{employeeName}
			</if>
			<if test="employeeTel != null and employeeTel != ''.toString()">			
				,employee_tel = #{employeeTel}
			</if>		
			<if test="employeeAddress != null and employeeAddress != ''.toString()">			
				,employee_address = #{employeeAddress}
			</if>		
			<if test="employeeEmail != null and employeeEmail != ''.toString()">			
				,employee_email = #{employeeEmail}
			</if>		
			<if test="employeeDepartment != null and employeeDepartment != ''.toString()">			
				,employee_department = #{employeeDepartment}
			</if>		
			<if test="employeePosition != null and employeePosition != ''.toString()">			
				,employee_position = #{employeePosition}
			</if>		
		</trim>
		WHERE 
			employee_code = #{employeeCode};
	</update>
	
	<delete id="deleteHumanResources" parameterType="java.util.List">
		DELETE 
			FROM 
				employee_info 
			WHERE 
				employee_code in
				<foreach collection="list" item="code" open="(" close=")" separator=",">
					#{code}
				</foreach>
	</delete>	
	
<!-- =========================================================== -->
<resultMap type="Client"  id="getClientInfo">
	<result  property="clientCode" 				column="client_code"/>
	<result  property="clientCategory" 				column="client_category"/>
	<result  property="clientName" 				column="client_name"/>
	<result  property="clientTel" 			column="client_tel"/>
	<result  property="clientEmployee" 			column="client_employee"/>
	<result  property="clientCeo" 				column="client_ceo"/>
	<result  property="clientBusinessNum" 				column="client_business_num"/>
	<result  property="clientAddress" 				column="client_address"/>
	<result  property="clientInfoRegDate" 				column="client_info_reg_date"/>
	<result  property="clientInfoUpdateDate" 		column="client_info_update_date"/>
</resultMap>
	
	<!-- 불러오기	 --> 
	<select id="getClient" resultMap="getClientInfo"  parameterType = "map" resultType="Client" fetchSize="1000">
		SELECT
			c.client_code
			,c.client_category
			,c.client_name
			,c.client_tel
			,c.client_employee
			,c.client_ceo
			,c.client_business_num
			,c.client_address
			,c.client_info_reg_date
			,c.client_info_update_date
		FROM
			client_info as c
		LIMIT #{rowStart}, #{rowPerPage};			
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%', #{searchValue} ,'%');
			</if>
		</trim>

	</select>

	<select id="getClientCount" resultType="int">
		SELECT 
			COUNT(1)
		FROM
			client_info as c
	</select>			
	
	<!-- 추가	 -->	
	<insert id="addClient" parameterType="Client">
		INSERT INTO client_info
		( client_code
		 ,client_category
		 ,client_name
		 ,client_tel
		 ,client_employee
		 ,client_ceo
		 ,client_business_num
		 ,client_address
		 ,client_info_reg_date
		 ,client_info_update_date
		)VALUES(
 			sf_newClientCode()
		 ,#{clientCategory}
		 ,#{clientName}
		 ,#{clientTel}
		 ,#{clientEmployee}
		 ,#{clientCeo}
		 ,#{clientBusinessNum}
		 ,#{clientAddress}
		 ,NOW()
		 ,null);
	</insert>
	
	<!-- 수정 -->
	<update id="modifyClient" parameterType="Client">
	UPDATE client_info 
	<trim prefix="SET" prefixOverrides=",">
		<if test="clientCode != null and clientCode != ''.toString()">			
			,client_code = #{clientCode}
		</if>
		<if test="clientCategory != null and clientCategory != ''.toString()">			
			,client_category = #{clientCategory}
		</if>
		<if test="clientName != null and clientName != ''.toString()">			
			,client_name = #{clientName}
		</if>
		<if test="clientTel != null and clientTel != ''.toString()">			
			,client_tel = #{clientTel}
		</if>
		<if test="clientCeo != null and clientCeo != ''.toString()">			
			,client_ceo = #{clientCeo}
		</if>
		<if test="clientEmployee != null and clientEmployee != ''.toString()">			
			,client_employee = #{clientEmployee}
		</if>		
		<if test="clientBusinessNum != null and clientBusinessNum != ''.toString()">			
			,client_business_num = #{clientBusinessNum}
		</if>		
		<if test="clientAddress != null and clientAddress != ''.toString()">			
			,client_address = #{clientAddress}
		</if>		
			,client_info_update_date = NOW()
	</trim>
	WHERE 
		client_code = #{clientCode};
	</update>
	
	<!-- 수정화면 뿌려주기 -->
	<select id="getClientInfoByCode" parameterType="String" resultMap="getClientInfo">
		SELECT 
			 client_code
			,client_category			
			,client_name			
			,client_tel			
			,client_ceo		
			,client_employee		
			,client_business_num			
			,client_address		
			,client_info_reg_date
			,client_info_update_date
		FROM 
			client_info AS c
		WHERE 
			c.client_code = #{clientCode};
	</select>

	<delete id="deleteClient" parameterType="java.util.List">
		DELETE 
			FROM 
				client_info 
			WHERE 
				client_code in
				<foreach collection="list" item="code" open="(" close=")" separator=",">
					#{code}
				</foreach>
	</delete>
			

<!-- =========================================================== -->
	<resultMap type="AccountingCategory" id="AccountingCategoryMap">
		<result property="categoryCode" 		column="account_category_code"/>
		<result property="categoryName" 		column="account_category_name"/>
		<result property="categoryContent" 		column="account_category_content"/>
		<result property="categoryRegDate" 		column="account_category_reg_date"/>
		<result property="categoryUpdateDate" 	column="account_category_update_date"/>
	</resultMap>
	
	<insert id="addAccountSubject" parameterType="AccountingCategory">
		INSERT INTO account_category_list
		(account_category_code
		,account_category_name
		,account_category_content
		,account_category_reg_date
		,account_category_update_date)
	VALUES 
		(sf_newAccountCategoryCode()
		,#{categoryName}
		,#{categoryContent}
		,NOW()
		,null);
	</insert>
	
	<select id="getAccountSubjectByCode" parameterType="String" resultMap="AccountingCategoryMap">
		SELECT 
			account_category_code
			,account_category_name
			,account_category_content
			,account_category_reg_date
			,account_category_update_date
		FROM 
			account_category_list AS acc
		WHERE
			acc.account_category_code = #{categoryCode};	
	</select>
	
	<update id="modifyMember" parameterType="AccountingCategory">
		UPDATE account_category_list
		<trim prefix="SET" prefixOverrides=",">
			<if test="categoryName != null and categoryName != ''.toString()">
				,account_category_name=#{categoryName}
			</if>
			<if test="categoryContent != null and categoryContent != ''.toString()">
				,account_category_content=#{categoryContent}
			</if>
				,account_category_update_date=NOW()
		</trim>
		WHERE 
			account_category_code=#{categoryCode};
	</update>
	
	<select id="getAccountingSubjectList" parameterType="map" resultMap="AccountingCategoryMap" fetchSize="1000">
		SELECT
			account_category_code
			,account_category_content
			,account_category_name
			,account_category_reg_date
			,account_category_update_date
		FROM
			account_category_list
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchKey != null and searchKey != ''.toString()">
				${searchKey} LIKE CONCAT('%', #{searchValue} ,'%');
			</if>
		</trim>
	</select>
	
<!-- =========================================================== -->
	
<resultMap type="SubClassInspection" id="subClassInspectionMap">
		<result property="qualityInspectionCode" column="quality_inspection_code"/>
		<result property="highClassCode" column="high_class_code"/>
		<result property="highMedClassCode" column="high_med_class_code"/>
		<result property="highMedLowClassCode" column="high_med_low_class_code"/>
		<result property="subClassCode" column="sub_class_code"/>
		<result property="subClassName" column="sub_class_name"/>
		<result property="subClassRegDate" column="sub_class_reg_date"/>
		<association property="highClassInspection" javaType="highClassInspection">
		<result column="high_class_name" property="highClassName"/>
		</association>
		<association property="mediumClassInspection" javaType="mediumClassInspection">
		<result column="med_class_name" property="medClassName"/>
		</association>
		<association property="lowClassInspection" javaType="lowClassInspection">
		<result column="low_class_name" property="lowClassName"/>
		</association>	
</resultMap>
<!--품질검사 조회  -->
<select id="searchInspectionList" parameterType="hashmap" resultType="map">
		SELECT
			s.quality_inspection_code,
			h.high_class_code,
			h.high_class_name,
			m.high_med_class_code,
			m.med_class_code,
			m.med_class_name,
			l.high_med_low_class_code,
			l.low_class_code,
			l.low_class_name,
			s.sub_class_code,
			s.sub_class_name,
			DATE_FORMAT(s.sub_class_reg_date,'%Y-%m-%d %T') AS inspection_reg_date
		FROM sub_class_inspection_list AS s
			INNER JOIN
				low_class_inspection_list AS l
					ON s.high_med_low_class_code = l.high_med_low_class_code
			INNER JOIN
				medium_class_inspection_list AS m
					ON s.high_med_class_code =m.high_med_class_code
			INNER JOIN
				high_class_inspection_list AS h
				ON s.high_class_code = h.high_class_code
			<trim prefix="WHERE" prefixOverrides="AND">
			<if test="highClassCateName != null and highClassCateName != ''.toString()">	
				AND h.high_class_code=#{highClassCateName}
			</if>
			<if test="middleClassCateName != null and middleClassCateName != ''.toString()">	
				AND m.high_med_class_code=#{middleClassCateName}
			</if>	
			<if test="lowClassCateName != null and lowClassCateName != ''.toString()">
				AND l.high_med_low_class_code=#{lowClassCateName}
			</if>	
			</trim>
		ORDER BY sub_class_reg_date;	
</select>

<!--품질검사 삭제  -->
<delete id="deleteQualityInspection" parameterType="String">
DELETE
FROM
sub_class_inspection_list
WHERE quality_inspection_code =#{checkArray};

</delete>

<!--품질검사 등록  -->
<insert id="addQualityInspection" parameterType="map">
	INSERT INTO sub_class_inspection_list
		(quality_inspection_code, 
		 high_med_low_class_code,
		 high_med_class_code,
		 high_class_code, 
		 sub_class_code, 
		 sub_class_name, 
		 sub_class_reg_date, 
		 sub_class_update_date)
	VALUES (sf_QualityInspectionCode(#{highMedLowClassCode}), 
			#{highMedLowClassCode},
			#{highMedClassCode}, 
			#{highClassCode},
			sf_subInspectionCode(), 
			 #{subClassName},
			 CURDATE(), 
			 CURDATE())

</insert>

<!-- 대분류카테고리 -->
<select id="getHighClassCate" resultType="map">
	SELECT
	 h.high_class_code AS highClassCode,
	 h.high_class_name AS highClassName
	FROM
	high_class_inspection_list AS h
	INNER JOIN
	medium_class_inspection_list AS m
	ON h.high_class_code=m.high_class_code
	INNER JOIN
	low_class_inspection_list AS l
	ON m.high_med_class_code= l.high_med_class_code
	INNER JOIN
	sub_class_inspection_list AS s
	ON l.high_med_low_class_code =s.high_med_low_class_code
	GROUP BY h.high_class_code;
</select>
<!--중분류카테고리 -->
<select id="getMediumClassCate"  parameterType="String" resultType="map">
	SELECT
		 h.high_class_code AS highClassCode,
		 h.high_class_name AS highClassName,
		 m.high_med_class_code AS highMediumClassCode,
		 m.med_class_code AS mediumClassCode,
		 m.med_class_name AS mediumClassName
	FROM
		high_class_inspection_list AS h
	INNER JOIN
		medium_class_inspection_list AS m
	ON h.high_class_code=m.high_class_code
	INNER JOIN
		low_class_inspection_list AS l
	ON m.high_med_class_code= l.high_med_class_code
	INNER JOIN
		sub_class_inspection_list AS s
	ON l.high_med_low_class_code =s.high_med_low_class_code
	WHERE h.high_class_code = #{highClassCateName}
	GROUP BY m.high_med_class_code;
</select>
<select id="getLowClassCate" parameterType="String" resultType="map">
	SELECT
		 h.high_class_code AS highClassCode,
		 h.high_class_name AS highClassName,
		m.high_med_class_code AS highMediumClassCode,
		 m.med_class_code AS mediumClassCode,
		 m.med_class_name AS mediumClassName,
		 l.high_med_low_class_code AS highMedLowClassCode,
		 l.low_class_code AS lowClassCode,
		 l.low_class_name AS lowClassName
	FROM
		high_class_inspection_list AS h
	INNER JOIN
		medium_class_inspection_list AS m
	ON h.high_class_code=m.high_class_code
	INNER JOIN
		low_class_inspection_list AS l
	ON m.high_med_class_code= l.high_med_class_code
	INNER JOIN
		sub_class_inspection_list AS s
	ON l.high_med_low_class_code =s.high_med_low_class_code
	WHERE 
	 m.high_med_class_code=#{middleClassCateName}
	GROUP BY l.high_med_low_class_code
</select>

<update id="modifyQualityInspection" parameterType="SubClassInspection">
UPDATE sub_class_inspection_list AS s  
		inner join 
		low_class_inspection_list AS l
		ON s.high_med_low_class_code = l.high_med_low_class_code
		INNER JOIN
		medium_class_inspection_list AS m
		ON s.high_med_class_code =m.high_med_class_code
		INNER JOIN
		high_class_inspection_list AS h
		ON s.high_class_code = h.high_class_code
	<trim prefix="SET" prefixOverrides=",">	
		<if test="highClassInspection.highClassName != null and highClassInspection.highClassName != ''.toString()">	
			,h.high_class_name=#{highClassInspection.highClassName}
		</if>
		<if test="mediumClassInspection.medClassName != null and mediumClassInspection.medClassName != ''.toString()">	
			,m.med_class_name=#{mediumClassInspection.medClassName}
		</if>
		<if test="lowClassInspection.lowClassName != null and lowClassInspection.lowClassName != ''.toString()">	
			,l.low_class_name=#{lowClassInspection.lowClassName}
		</if>
		<if test="subClassName != null and subClassName != ''.toString()">	
			,s.sub_class_name =#{subClassName}
		</if>
	</trim>
	where
		s.quality_inspection_code=#{qualityInspectionCode};
</update>

	<select id="getQualityInspectionList"  resultType="map">
		SELECT
			s.quality_inspection_code,
			h.high_class_name,
			m.med_class_code,
			m.med_class_name,
			l.low_class_name,
			s.sub_class_name,
			s.sub_class_reg_date
		FROM sub_class_inspection_list AS s
			INNER JOIN
				low_class_inspection_list AS l
					ON s.high_med_low_class_code = l.high_med_low_class_code
			INNER JOIN
				medium_class_inspection_list AS m
					ON s.high_med_class_code =m.high_med_class_code
			INNER JOIN
				high_class_inspection_list AS h
				ON s.high_class_code = h.high_class_code
			ORDER BY sub_class_reg_date;	
	</select>
	<select id="getQualityInspectionCode" parameterType="String" resultMap="subClassInspectionMap">
		SELECT
			s.quality_inspection_code,
			h.high_class_name,
			m.med_class_code,
			m.med_class_name,
			l.low_class_name,
			s.sub_class_name,
			s.sub_class_reg_date
		FROM sub_class_inspection_list AS s
		INNER JOIN
			low_class_inspection_list AS l
				ON s.high_med_low_class_code = l.high_med_low_class_code
		INNER JOIN
			medium_class_inspection_list AS m
				ON s.high_med_class_code =m.high_med_class_code
		INNER JOIN
			high_class_inspection_list AS h
			ON s.high_class_code = h.high_class_code
		where  quality_inspection_code=#{qualityInspectionCode};
	</select>
	

	
	
	<!-- ===========================================원부자재========================================================== -->
		
	<resultMap type="RawMaterials" id="rawMaterialsMap">
		<result property="rawMaterialCode"			column="raw_material_code"/>
		<result property="highClass"				column="raw_material_high_classification"/>
		<result property="medClass"					column="raw_material_medium_classification"/>
		<result property="medCode"					column="raw_material_medium_code"/>
		<result property="rawMaterialName"			column="raw_material_name"/>
		<result property="subCode"					column="raw_material_sub_code"/>
		<result property="colorCode"				column="raw_material_color_code"/>
		<result property="feature"					column="raw_material_feature"/>
		<result property="unit"						column="raw_material_unit"/>
		<result property="rawMaterialRegDate"		column="raw_material_reg_date"/>
		<result property="rawMaterialUpdateDate"	column="raw_material_update_date"/>
	</resultMap>
	
	
	<!-- 원부자재 전체 리스트 조회  -->
	<select id="getMaterialsList" resultMap="rawMaterialsMap">
		SELECT 
			  raw_material_code					
			, raw_material_high_classification
			, raw_material_medium_classification
			, raw_material_medium_code
			, raw_material_name
			, raw_material_sub_code
			, raw_material_color_code
			, raw_material_feature
			, raw_material_unit
			, raw_material_reg_date
			, raw_material_update_date
		FROM 
			raw_material_info;
	</select>
	
	
	<!-- 원부자재 정보 수정  -->
	<update id="modifyMaterialInfo">
		UPDATE raw_material_info
			SET
				raw_material_high_classification=#{highClass},
				raw_material_medium_classification=#{medClass},
				raw_material_medium_code=#{medCode},
				raw_material_name=#{materialName},
				raw_material_color_code=#{colorCode},
				raw_material_feature=#{feature},
				raw_material_unit=#{unit},
				raw_material_update_date=NOW()
			WHERE raw_material_code=#{materialCode};
	</update>
	
</mapper>